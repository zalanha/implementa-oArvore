import java.util.LinkedList;
import java.util.Queue;

class No {
    int valor;
    No esquerda;
    No direita;
    int fatorBalanceamento;

    public No(int valor) {
        this.valor = valor;
        this.esquerda = null;
        this.direita = null;
        this.fatorBalanceamento = 0;
    }
}

public class ArvoreBinaria {

    public static int contarNosIterativo(No raiz) {
        if (raiz == null) return 0;

        int contador = 0;
        Queue<No> fila = new LinkedList<>();
        fila.add(raiz);

        while (!fila.isEmpty()) {
            No noAtual = fila.poll();
            contador++;

            if (noAtual.esquerda != null) fila.add(noAtual.esquerda);
            if (noAtual.direita != null) fila.add(noAtual.direita);
        }

        return contador;
    }

    public static void atualizarFatorBalanceamento(No raiz) {
        if (raiz == null) return;

        Queue<No> fila = new LinkedList<>();
        fila.add(raiz);

        while (!fila.isEmpty()) {
            No noAtual = fila.poll();
            int alturaEsquerda = altura(noAtual.esquerda);
            int alturaDireita = altura(noAtual.direita);
            noAtual.fatorBalanceamento = alturaDireita - alturaEsquerda;

            if (noAtual.esquerda != null) fila.add(noAtual.esquerda);
            if (noAtual.direita != null) fila.add(noAtual.direita);
        }
    }

    public static int altura(No no) {
        if (no == null) return 0;

        int altura = 0;
        Queue<No> fila = new LinkedList<>();
        fila.add(no);

        while (!fila.isEmpty()) {
            int nivelSize = fila.size();
            for (int i = 0; i < nivelSize; i++) {
                No atual = fila.poll();
                if (atual.esquerda != null) fila.add(atual.esquerda);
                if (atual.direita != null) fila.add(atual.direita);
            }
            altura++;
        }

        return altura;
    }

    public static void imprimirFatores(No raiz) {
        if (raiz == null) return;

        Queue<No> fila = new LinkedList<>();
        fila.add(raiz);

        while (!fila.isEmpty()) {
            No noAtual = fila.poll();
            System.out.println("Valor: " + noAtual.valor + ", Fator de Balanceamento: " + noAtual.fatorBalanceamento);

            if (noAtual.esquerda != null) fila.add(noAtual.esquerda);
            if (noAtual.direita != null) fila.add(noAtual.direita);
        }
    }

    public static void main(String[] args) {
        No raiz = new No(10);
        raiz.esquerda = new No(5);
        raiz.direita = new No(15);
        raiz.esquerda.esquerda = new No(3);
        raiz.esquerda.direita = new No(7);
        raiz.direita.direita = new No(18);

        System.out.println("Total de n√≥s (iterativo): " + contarNosIterativo(raiz));

        atualizarFatorBalanceamento(raiz);

        System.out.println("\nFatores de balanceamento:");
        imprimirFatores(raiz);
    }
}
